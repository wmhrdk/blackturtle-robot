#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
import motor as mtr

class Driver:
	
	def __init__(self):
		rospy.init_node('driver')

		self._last_received = rospy.get_time()
		self._timeout = rospy.get_param('~timeout', 2)
		self._rate = rospy.get_param('~rate', 10)
		self._max_speed = rospy.get_param('~max_speed', 1.0)

		self.motor_1 = mtr.Motor(mtr._MOTOR_1_EN,
								 mtr._MOTOR_1_A,
								 mtr._MOTOR_1_B)

		self.motor_2 = mtr.Motor(mtr._MOTOR_2_EN,
								 mtr._MOTOR_2_A,
								 mtr._MOTOR_2_B)

		self.motor_3 = mtr.Motor(mtr._MOTOR_3_EN,
								 mtr._MOTOR_3_A,
								 mtr._MOTOR_3_B)
		
		self._motor_1_speed = 0
		self._motor_2_speed = 0
		self._motor_3_speed = 0

		rospy.Subscriber('cmd_vel', Twist, self._velocity_callback)
	
	def _velocity_callback(self, message):
		self._last_received = rospy.get_time()

		linear_x = message.linear.x
		linear_y = message.linear.y
		angular_z = message.angular.z

		self._motor_1_speed = (-0.333*linear_x)+(0.575*linear_y)+(0.333*angular_z)
		self._motor_2_speed = (-0.333*linear_x)+(-0.575*linear_y)+(0.333*angular_z)
		self._motor_3_speed = (0.667*linear_x)+(0.0*linear_y)+(0.333*angular_z)

		self._motor_1_speed = (self._motor_1_speed/self._max_speed) * 100
		self._motor_2_speed = (self._motor_2_speed/self._max_speed) * 100
		self._motor_3_speed = (self._motor_3_speed/self._max_speed) * 100

		motor_speed = [self._motor_1_speed, self._motor_2_speed, self._motor_3_speed]

		print(motor_speed)

	def run(self):
		print("--> Running Driver Node")
		rate = rospy.Rate(self._rate)

		while not rospy.is_shutdown():
			delay = rospy.get_time() - self._last_received
			if delay < self._timeout:
				self.motor_1.move(self._motor_1_speed)
				self.motor_2.move(self._motor_2_speed)
				self.motor_3.move(self._motor_3_speed)
			else:
				self.motor_1.move(0)
				self.motor_2.move(0)
				self.motor_3.move(0)
			rate.sleep()

def main():
	driver = Driver()
	driver.run()
	del driver

if __name__ == '__main__':
	main()

